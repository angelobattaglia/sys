{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Fundamentals of tooling and Sys Admin principles in software This repository contains all of the fundamentals to learn how to use the tools about building software and learning resources, notes.","title":"Welcome to Fundamentals of tooling and Sys Admin principles in software"},{"location":"#welcome-to-fundamentals-of-tooling-and-sys-admin-principles-in-software","text":"This repository contains all of the fundamentals to learn how to use the tools about building software and learning resources, notes.","title":"Welcome to Fundamentals of tooling and Sys Admin principles in software"},{"location":"Docker/","text":"Docker If you happen to use GitHub, you've noticed that from 2020 or so a large portion of software gets built up with docker. This suggests that docker, just like git, seems a fundamental tool for someone who thinks about getting his software online.","title":"Docker"},{"location":"Docker/#docker","text":"If you happen to use GitHub, you've noticed that from 2020 or so a large portion of software gets built up with docker. This suggests that docker, just like git, seems a fundamental tool for someone who thinks about getting his software online.","title":"Docker"},{"location":"Git/","text":"Git fundamentals Add new remotes: git remote add gitlab git@gitlab.com:Username/Repo.git git remote add github git@github.com:Username/Repo.git To push over gitlab/github master: git push gitlab master git push github master To list all of the remotes for a repository: git remote -v Listing branches: git branch #To see local branches git branch -r #To see branches git branch -a #To see both local and remote branches The easiest way to switch branch on Git is to use the \u201cgit checkout\u201d command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to append the \u201c-b\u201d option, otherwise you won\u2019t be able to switch to that branch. git checkout <existing_branch> Create new branch: git checkout -b \"<new_branch>\" to add : https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase TODOs: Git worktree, git bare repository, git submodules git basic configuration When you install git for the first time on the new machine. Set the default command line editor as vim. git config --global core.editor vim git config --global user.name \"John Doe\" git config --global user.email \"john@doe.net\" git config --global color.ui \"auto\" To list all of the configs: git config --list git starter To start a new git project on github: git init add .gitignore for the files you don't want to commit git remote add 'name of the remote' www.github.com/angelobattaglia/progetto git remote set-url 'name of the remote' git@github.com:angelobattaglia/progetto.git git add -A or git add . git commit -a (-m \"first commit\") git push 'name of the remote' master If you want remove some file that you added to the .gitignore later: git rm --cached filetoremovefromthecache If you want to show all of the graph of commits just type: git log --all --graph --decorate (--oneline) Updating local repository from remote: git pull Working with Remote: To see how many remote for a git repository: git remote -v To add a remote to a git repository with https: git remote add \"Remote 1\" www.github.com/angelo/progetto git remote add \"Remote 2\" www.gitlab.com/angelo/progetto In my case: git remote add origin www.github... Push: git push \"remote name\" \"branch name\" git push all Branching: git branch 'new-branch-name' 'from-branch' To change from the current branch, for example, to another one use the argument \"checkout\": git checkout 'branchname' List all the branches of a given project: git branch -a git branch -r # list remote branches git branch # list local branches Local branches: colored white. Remote branches: colored red \"remotes/origin\" If you want to abort all current changes that aren't committed: git reset --hard If you just want to restore one file: git checkout filetorestore.txt Branch pointed as \"HEAD\" is the latest committed among all the branches How to merge: You can merge one or more branches. In the current branch, run: git merge \"branch-one\" git merge \"branch-one\" \"branch-two\" How to make a pull request: Find a project you want to contribute to Fork it Clone it to your local system Make a new branch Make your changes Push it back to your repo Click the Compare & pull request button Click Create pull request to open a new pull request Tagging a particular commit: git tag \"tag name\" # Will tag the commit HEAD (the latest) if not specified otherwise git tag \"hash of the commit\" \"tag name\" # Will tag the specific commit tagged with that hash List all the tags: git tag extras: Testing, Travis-CI, AppVeyor-CD and code-coverage. How to licence your software. https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository#disclaimer https://opensource.guide/legal/","title":"Git fundamentals"},{"location":"Git/#git-fundamentals","text":"Add new remotes: git remote add gitlab git@gitlab.com:Username/Repo.git git remote add github git@github.com:Username/Repo.git To push over gitlab/github master: git push gitlab master git push github master To list all of the remotes for a repository: git remote -v Listing branches: git branch #To see local branches git branch -r #To see branches git branch -a #To see both local and remote branches The easiest way to switch branch on Git is to use the \u201cgit checkout\u201d command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to append the \u201c-b\u201d option, otherwise you won\u2019t be able to switch to that branch. git checkout <existing_branch> Create new branch: git checkout -b \"<new_branch>\" to add : https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase TODOs: Git worktree, git bare repository, git submodules","title":"Git fundamentals"},{"location":"Git/#git-basic-configuration","text":"When you install git for the first time on the new machine. Set the default command line editor as vim. git config --global core.editor vim git config --global user.name \"John Doe\" git config --global user.email \"john@doe.net\" git config --global color.ui \"auto\" To list all of the configs: git config --list","title":"git basic configuration"},{"location":"Git/#git-starter","text":"To start a new git project on github: git init add .gitignore for the files you don't want to commit git remote add 'name of the remote' www.github.com/angelobattaglia/progetto git remote set-url 'name of the remote' git@github.com:angelobattaglia/progetto.git git add -A or git add . git commit -a (-m \"first commit\") git push 'name of the remote' master If you want remove some file that you added to the .gitignore later: git rm --cached filetoremovefromthecache If you want to show all of the graph of commits just type: git log --all --graph --decorate (--oneline) Updating local repository from remote: git pull","title":"git starter"},{"location":"Git/#working-with-remote","text":"To see how many remote for a git repository: git remote -v To add a remote to a git repository with https: git remote add \"Remote 1\" www.github.com/angelo/progetto git remote add \"Remote 2\" www.gitlab.com/angelo/progetto In my case: git remote add origin www.github... Push: git push \"remote name\" \"branch name\" git push all","title":"Working with Remote:"},{"location":"Git/#branching","text":"git branch 'new-branch-name' 'from-branch' To change from the current branch, for example, to another one use the argument \"checkout\": git checkout 'branchname' List all the branches of a given project: git branch -a git branch -r # list remote branches git branch # list local branches Local branches: colored white. Remote branches: colored red \"remotes/origin\" If you want to abort all current changes that aren't committed: git reset --hard If you just want to restore one file: git checkout filetorestore.txt Branch pointed as \"HEAD\" is the latest committed among all the branches","title":"Branching:"},{"location":"Git/#how-to-merge","text":"You can merge one or more branches. In the current branch, run: git merge \"branch-one\" git merge \"branch-one\" \"branch-two\"","title":"How to merge:"},{"location":"Git/#how-to-make-a-pull-request","text":"Find a project you want to contribute to Fork it Clone it to your local system Make a new branch Make your changes Push it back to your repo Click the Compare & pull request button Click Create pull request to open a new pull request","title":"How to make a pull request:"},{"location":"Git/#tagging-a-particular-commit","text":"git tag \"tag name\" # Will tag the commit HEAD (the latest) if not specified otherwise git tag \"hash of the commit\" \"tag name\" # Will tag the specific commit tagged with that hash List all the tags: git tag","title":"Tagging a particular commit:"},{"location":"Git/#extras","text":"Testing, Travis-CI, AppVeyor-CD and code-coverage. How to licence your software. https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository#disclaimer https://opensource.guide/legal/","title":"extras:"},{"location":"Links/","text":"Links and Ideas Tools The operating system is our development environment. You can't control GUIs programmatically. You can't \"script\" GUIs. You can't create your own workflow. A command-line based approach to computer programming. Minimal linux/FreeBSD/OpenBSD distribution running dwm A posix compliant shell, such as dash C Make Git The UNIX core utilities tmux , vim, gdb , valgrind Books used The C Programming Language K&R 2nd Edition Understanding and Using C pointers by Richard Reese Practical C programming C in a nutshell 21st Century C Mastering Algorithms With C Numerical Recipes In C The Art Of ... 2nd edition, W. Press, S. Teukolsky, W. Vetterling, B. Flannery Algorithms + Data Structure = Programs The missing semester Helpful External Resources Command line environment Course of Systems Programming by Notre Dame University Great practical ideas in Computer Science by CMU Fabrice Bellard's projects The UNIX philosophy FreeBSD manual (good intro to UNIX) The Gentoo Handbook The Archwiki OpenBSD, a minimalist, general purpose OS THE Ultimate Book List Programming Concepts to know Teach yourself CS Diagrams of all sorts (ER, flowchart, UML) Minimalist graphics library Thinkpad wiki The UNIX command line (shell scripting) Pure Shell Bible by Dylan Araps commandlinefu learning the shell Shell commands explained Terminals are sexy Various Linux tutorials cheat sheet shell Practice Regular Expressions RegexGolf Regexone Regex101 Latex and Markdown Free latex editor (although worse than the Make and Vi approach) Latex tutorial Markdown tutorial 1 Markdown tutorial 2 Markdown tutorial 3 Make Makefile tutorial GNU Make documentation make Generic C Project template Simple Project Structure in C Simple Project Structure in Cpp Git and Mercurial Mercurial short guide Git learning material Progit book Competitive Programming Learn C++ C++ book list Competitive Programmer's handbook Competitive programming algorithms (cp-algorithms.com) Programming Challenges, Skiena National University of Singapore book on Competitive Programming There's douzens of websites with problems and competitions. Focus on these to start off: Practice: cses.fi Practice: codewars.com adventofcode.com Practice: Codeforces Practice: Project Euler Practice: Codeforces ladder Java Which Open JDK distribution to pick up? Recommended JDK distribution: Amazon Corretto 8 Maven Documentation Quick Maven Tutorial Java 8 standard API documentation Java 8 tutorial Project based learning From the Transistor by George Hotz Aggregator of project tutorials Projects list for beginners Projects from Scratch Shell Text Editor Interpreter Compiler Compiler 2 Build System Database Building a Web Browser Physically based rendering book (Computer Graphics) Emacs Where to find software Text Editors Suckless recommandations Good software according to cat-v.org Alternatives list Other list of recommandations Linux ricing guide Uses This Modern UNIX utilities YouTube Channels that have interesting content Vi and Tmux Emacs Linux SWE Basics Privacy Notes on privacy and security How hard is it to delete your accounts? Schneier's Blog on Security Krebs's Blog on Security On Data collection and Deletion Dark Patterns Other resources on the topic RMS' website Software that is considered spyware Privacy tools Zoom Microsoft Facebook WhatsApp Why using WhatsApp is dangerous Messaging apps Keybase Social Cooling: the effects of big data analysis","title":"Links and Ideas"},{"location":"Links/#links-and-ideas","text":"","title":"Links and Ideas"},{"location":"Links/#tools","text":"The operating system is our development environment. You can't control GUIs programmatically. You can't \"script\" GUIs. You can't create your own workflow. A command-line based approach to computer programming. Minimal linux/FreeBSD/OpenBSD distribution running dwm A posix compliant shell, such as dash C Make Git The UNIX core utilities tmux , vim, gdb , valgrind","title":"Tools"},{"location":"Links/#books-used","text":"The C Programming Language K&R 2nd Edition Understanding and Using C pointers by Richard Reese Practical C programming C in a nutshell 21st Century C Mastering Algorithms With C Numerical Recipes In C The Art Of ... 2nd edition, W. Press, S. Teukolsky, W. Vetterling, B. Flannery Algorithms + Data Structure = Programs The missing semester","title":"Books used"},{"location":"Links/#helpful-external-resources","text":"Command line environment Course of Systems Programming by Notre Dame University Great practical ideas in Computer Science by CMU Fabrice Bellard's projects The UNIX philosophy FreeBSD manual (good intro to UNIX) The Gentoo Handbook The Archwiki OpenBSD, a minimalist, general purpose OS THE Ultimate Book List Programming Concepts to know Teach yourself CS Diagrams of all sorts (ER, flowchart, UML) Minimalist graphics library Thinkpad wiki","title":"Helpful External Resources"},{"location":"Links/#the-unix-command-line-shell-scripting","text":"Pure Shell Bible by Dylan Araps commandlinefu learning the shell Shell commands explained Terminals are sexy Various Linux tutorials cheat sheet shell","title":"The UNIX command line (shell scripting)"},{"location":"Links/#practice-regular-expressions","text":"RegexGolf Regexone Regex101","title":"Practice Regular Expressions"},{"location":"Links/#latex-and-markdown","text":"Free latex editor (although worse than the Make and Vi approach) Latex tutorial Markdown tutorial 1 Markdown tutorial 2 Markdown tutorial 3","title":"Latex and Markdown"},{"location":"Links/#make","text":"Makefile tutorial GNU Make documentation make Generic C Project template Simple Project Structure in C Simple Project Structure in Cpp","title":"Make"},{"location":"Links/#git-and-mercurial","text":"Mercurial short guide Git learning material Progit book","title":"Git and Mercurial"},{"location":"Links/#competitive-programming","text":"Learn C++ C++ book list Competitive Programmer's handbook Competitive programming algorithms (cp-algorithms.com) Programming Challenges, Skiena National University of Singapore book on Competitive Programming There's douzens of websites with problems and competitions. Focus on these to start off: Practice: cses.fi Practice: codewars.com adventofcode.com Practice: Codeforces Practice: Project Euler Practice: Codeforces ladder","title":"Competitive Programming"},{"location":"Links/#java","text":"Which Open JDK distribution to pick up? Recommended JDK distribution: Amazon Corretto 8 Maven Documentation Quick Maven Tutorial Java 8 standard API documentation Java 8 tutorial","title":"Java"},{"location":"Links/#project-based-learning","text":"From the Transistor by George Hotz Aggregator of project tutorials Projects list for beginners Projects from Scratch Shell Text Editor Interpreter Compiler Compiler 2 Build System Database Building a Web Browser Physically based rendering book (Computer Graphics) Emacs","title":"Project based learning"},{"location":"Links/#where-to-find-software","text":"Text Editors Suckless recommandations Good software according to cat-v.org Alternatives list Other list of recommandations Linux ricing guide Uses This Modern UNIX utilities","title":"Where to find software"},{"location":"Links/#youtube-channels-that-have-interesting-content","text":"Vi and Tmux Emacs Linux SWE Basics Privacy","title":"YouTube Channels that have interesting content"},{"location":"Links/#notes-on-privacy-and-security","text":"How hard is it to delete your accounts? Schneier's Blog on Security Krebs's Blog on Security On Data collection and Deletion Dark Patterns Other resources on the topic RMS' website Software that is considered spyware Privacy tools Zoom Microsoft Facebook WhatsApp Why using WhatsApp is dangerous Messaging apps Keybase Social Cooling: the effects of big data analysis","title":"Notes on privacy and security"},{"location":"Make/","text":"Make There are many build systems out there, such as bazel , Maven , CMake and so on so forth. Make is the standard build system, used by many, especially after GNU Make, and implementation of it, popularized it.","title":"Make"},{"location":"Make/#make","text":"There are many build systems out there, such as bazel , Maven , CMake and so on so forth. Make is the standard build system, used by many, especially after GNU Make, and implementation of it, popularized it.","title":"Make"},{"location":"MkDocs/","text":"Introduction to MkDocs For full documentation visit mkdocs.org . Da vedere: https://squidfunk.github.io/mkdocs-material/setup/setting-up-site-analytics/#google-analytics Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Introduction to MkDocs"},{"location":"MkDocs/#introduction-to-mkdocs","text":"For full documentation visit mkdocs.org . Da vedere: https://squidfunk.github.io/mkdocs-material/setup/setting-up-site-analytics/#google-analytics","title":"Introduction to MkDocs"},{"location":"MkDocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"MkDocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"SSH/","text":"Introduction SSH is a protocol that used to connect to servers. Key generation In order to provide a public key, each user in your system must generate one. You should check to make sure you don\u2019t already have a key. By default, a user\u2019s SSH keys are stored in that user\u2019s ~/.ssh directory. cd $HOME/.ssh ls \u2009 You\u2019re looking for a pair of files named something like id_dsa or id_rsa and a matching file with a .pub extension. The .pub file is your public key, and the other file is your private key. If you don't have these, go to the $HOME dir and: ssh-keygen It will ask you for a location with a name. You choose $(HOME)/.ssh/id_rsa. Click return 2 times. $ ls id_rsa id_rsa.pub So: id_rsa -> private key, id_rsa.pub -> public key. Never ever share the private key. When on Windows, use git bash. On a UNIX sys do this: ssh -T git@github.com Say yes, and then try to download a repo with SSH. If you have problems: - Testing your SSH connection - Generating Multiple keys for different remote servers to connect to","title":"SSH"},{"location":"SSH/#introduction","text":"SSH is a protocol that used to connect to servers.","title":"Introduction"},{"location":"SSH/#key-generation","text":"In order to provide a public key, each user in your system must generate one. You should check to make sure you don\u2019t already have a key. By default, a user\u2019s SSH keys are stored in that user\u2019s ~/.ssh directory. cd $HOME/.ssh ls \u2009 You\u2019re looking for a pair of files named something like id_dsa or id_rsa and a matching file with a .pub extension. The .pub file is your public key, and the other file is your private key. If you don't have these, go to the $HOME dir and: ssh-keygen It will ask you for a location with a name. You choose $(HOME)/.ssh/id_rsa. Click return 2 times. $ ls id_rsa id_rsa.pub So: id_rsa -> private key, id_rsa.pub -> public key. Never ever share the private key. When on Windows, use git bash. On a UNIX sys do this: ssh -T git@github.com Say yes, and then try to download a repo with SSH. If you have problems: - Testing your SSH connection - Generating Multiple keys for different remote servers to connect to","title":"Key generation"},{"location":"C/Chapter_01/","text":"Starting C programming","title":"Starting C programming"},{"location":"C/Chapter_01/#starting-c-programming","text":"","title":"Starting C programming"},{"location":"Linking/Basics/","text":"References Inlcude guard (wikipedia link) Systems Programming in UNIX Linux by K.C. Wang, Springer Let's take two files to start with gcc Script01.c Script02.c gcc Script01.c Script02.c Simple convert into a binary executable gcc Script01.c Script02.c or .. tcc Script01.c Script02.c Statically linked library First step: compile Script02.c into Script02.o, important using the '-c' flag gcc -c Script02.c Second step: create a Statically Linked Library with Script02.o as a member of it ar rcs libmylib.a Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-static' specifies that is being statically linked '-L.' specifies the library path (current directory .) '-l' specifies the library 'mylib' is specified without the prefex lib, as well as the suffix .a gcc -static Script01.c -L. -lmylib Fourth step: run the result, i.e. a.out, as usual ./a.out Dynamic Linking First step: compile Script02.c into Script02.o, -fPIC compile to Position Independent Code Script02.o gcc -c -fPIC Script02.c Second step: create a shared (-shared) Dinamically Linked Library (.so) with Script02.o as a member of it gcc -shared -o libmylib.so Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-L.' specifies the library path (current directory . or you can specify it) '-l' specifies the library as seen next '-lmylib' is specified without the prefex lib, as well as the suffix .a gcc Script01.c -L. -lmylib Third-2 step: exporting the LD_LIBRARY = ./ If the library is not in the curent directory set LD_LIBRARY_PATH to point to the directory containing the library export LD_LIBRARY_PATH = ./ Fourth step: run the result, i.e. a.out, as usual ./a.out","title":"Basics"},{"location":"Linking/Basics/#references","text":"Inlcude guard (wikipedia link) Systems Programming in UNIX Linux by K.C. Wang, Springer","title":"References"},{"location":"Linking/Basics/#lets-take-two-files-to-start-with","text":"gcc Script01.c Script02.c gcc Script01.c Script02.c","title":"Let's take two files to start with"},{"location":"Linking/Basics/#simple-convert-into-a-binary-executable","text":"gcc Script01.c Script02.c or .. tcc Script01.c Script02.c","title":"Simple convert into a binary executable"},{"location":"Linking/Basics/#statically-linked-library","text":"First step: compile Script02.c into Script02.o, important using the '-c' flag gcc -c Script02.c Second step: create a Statically Linked Library with Script02.o as a member of it ar rcs libmylib.a Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-static' specifies that is being statically linked '-L.' specifies the library path (current directory .) '-l' specifies the library 'mylib' is specified without the prefex lib, as well as the suffix .a gcc -static Script01.c -L. -lmylib Fourth step: run the result, i.e. a.out, as usual ./a.out","title":"Statically linked library"},{"location":"Linking/Basics/#dynamic-linking","text":"First step: compile Script02.c into Script02.o, -fPIC compile to Position Independent Code Script02.o gcc -c -fPIC Script02.c Second step: create a shared (-shared) Dinamically Linked Library (.so) with Script02.o as a member of it gcc -shared -o libmylib.so Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-L.' specifies the library path (current directory . or you can specify it) '-l' specifies the library as seen next '-lmylib' is specified without the prefex lib, as well as the suffix .a gcc Script01.c -L. -lmylib Third-2 step: exporting the LD_LIBRARY = ./ If the library is not in the curent directory set LD_LIBRARY_PATH to point to the directory containing the library export LD_LIBRARY_PATH = ./ Fourth step: run the result, i.e. a.out, as usual ./a.out","title":"Dynamic Linking"},{"location":"Shell/Chapter_01/","text":"Starting Shell Programming Learning how to use sed, awk, grep, cat, fdisk and more Tools needed Shell: zsh, bash, ash, dash Text editor (Vim, Emacs) Terminal","title":"Starting Shell Programming"},{"location":"Shell/Chapter_01/#starting-shell-programming","text":"Learning how to use sed, awk, grep, cat, fdisk and more","title":"Starting Shell Programming"},{"location":"Shell/Chapter_01/#tools-needed","text":"Shell: zsh, bash, ash, dash Text editor (Vim, Emacs) Terminal","title":"Tools needed"}]}