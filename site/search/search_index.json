{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This repository contains all of the fundamentals to learn how to use the tools for introductory Systems Administration, which is essential in the process of building software.</p>"},{"location":"Docker/","title":"Docker","text":""},{"location":"Git/","title":"Git","text":"<p>Add new remotes:</p> <pre><code>git remote add gitlab git@gitlab.com:Username/Repo.git\ngit remote add github git@github.com:Username/Repo.git\n</code></pre> <p>To push over gitlab/github master:</p> <pre><code>git push gitlab master\ngit push github master\n</code></pre> <p>To list all of the remotes for a repository:</p> <pre><code>git remote -v \n</code></pre> <p>Listing branches:</p> <pre><code>git branch #To see local branches \ngit branch -r #To see  branches \ngit branch -a #To see both local and remote branches \n</code></pre> <p>The easiest way to switch branch on Git is to use the \u201cgit checkout\u201d command and specify the name of the branch you want to switch to.  If the destination branch does not exist, you have to append the \u201c-b\u201d option,  otherwise you won\u2019t be able to switch to that branch.</p> <pre><code>git checkout &lt;existing_branch&gt;\n</code></pre> <p>Create new branch:</p> <pre><code>git checkout -b \"&lt;new_branch&gt;\"\n\n</code></pre> <pre><code>to add : https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase\nTODOs: Git worktree, git bare repository, git submodules\n</code></pre>"},{"location":"Git/#git-basic-configuration","title":"git basic configuration","text":"<p>When you install git for the first time on the new machine. Set the default command line editor as vim.</p> <pre><code>    git config --global core.editor vim\n    git config --global user.name \"John Doe\"\n    git config --global user.email \"john@doe.net\"\n    git config --global color.ui \"auto\"\n</code></pre> <p>To list all of the configs:</p> <pre><code>    git config --list\n</code></pre>"},{"location":"Git/#git-starter","title":"git starter","text":"<p>To start a new git project on github:</p> <pre><code>    git init\n    add .gitignore for the files you don't want to commit\n    git remote add 'name of the remote' www.github.com/angelobattaglia/progetto\n    git remote set-url 'name of the remote' git@github.com:angelobattaglia/progetto.git\n    git add -A or git add .\n    git commit -a (-m \"first commit\")\n    git push 'name of the remote' master\n</code></pre> <p>If you want remove some file that you added to the .gitignore later:</p> <pre><code>    git rm --cached filetoremovefromthecache\n</code></pre> <p>If you want to show all of the graph of commits just type:</p> <pre><code>    git log --all --graph --decorate (--oneline)\n</code></pre> <p>Updating local repository from remote. Let's say your local branch is out of date, and you need to fetch changes from the same branch but from remote. In order to do this, we need to fetch from remote and then merge our local branch with the remote branch. So a git pull is a shortcut to  perform a git fetch followed up by a git merge.</p> <pre><code>    git pull\n</code></pre>"},{"location":"Git/#working-with-remote","title":"Working with Remote","text":"<p>To see how many remote for a git repository:</p> <pre><code>git remote -v\n</code></pre> <p>To add a remote to a git repository with https:</p> <pre><code>    git remote add \"Remote 1\" www.github.com/angelo/progetto\n    git remote add \"Remote 2\" www.gitlab.com/angelo/progetto\n</code></pre> <p>To remove a remote of an already initialized git repository:</p> <pre><code>    git remote remove \"Remote 1\"\n    git remote remove \"Remote 2\"\n</code></pre> <p>Push to remote(s):</p> <pre><code>    git push \"remote name\" \"branch name\"\n    git push all\n</code></pre>"},{"location":"Git/#branching","title":"Branching","text":"<pre><code>    git branch 'new-branch-name' 'from-branch'\n</code></pre> <p>To change from the current branch, for example, to another one use the argument \"checkout\":</p> <pre><code>    git checkout 'branchname'\n</code></pre> <p>List all the branches of a given project:</p> <pre><code>    git branch -a\n</code></pre> <pre><code>    git branch -r   # list remote branches\n</code></pre> <pre><code>    git branch      # list local branches\n</code></pre> <p>Local branches: colored white. Remote branches: colored red \"remotes/origin\" If you want to abort all current changes that aren't committed:</p> <pre><code>    git reset --hard\n</code></pre> <p>If you just want to restore one file:</p> <pre><code>    git checkout filetorestore.txt\n</code></pre> <p>Branch pointed as \"HEAD\" is the latest committed among all the branches</p>"},{"location":"Git/#how-to-merge","title":"How to merge","text":"<p>You can merge one or more branches. In the current branch, run:</p> <pre><code>    git merge \"branch-one\"\n    git merge \"branch-one\" \"branch-two\"\n</code></pre>"},{"location":"Git/#how-to-make-a-pull-request","title":"How to make a pull request","text":"<ul> <li>Find a project you want to contribute to</li> <li>Fork it</li> <li>Clone it to your local system</li> <li>Make a new branch</li> <li>Make your changes</li> <li>Push it back to your repo</li> <li>Click the Compare &amp; pull request button</li> <li>Click Create pull request to open a new pull request</li> </ul>"},{"location":"Git/#tagging-a-particular-commit","title":"Tagging a particular commit","text":"<pre><code>    git tag \"tag name\" # Will tag the commit HEAD (the latest) if not specified otherwise\n    git tag \"hash of the commit\" \"tag name\" # Will tag the specific commit tagged with that hash\n</code></pre> <p>List all the tags:</p> <pre><code>    git tag\n</code></pre>"},{"location":"Links/","title":"Links","text":""},{"location":"Links/#an-opinionated-guide-to-programming","title":"An Opinionated Guide to Programming","text":"<p>The operating system is our development environment. You can't control GUIs programmatically. You can't \"script\" GUIs. You can't create your own workflow. A command-line based approach to computer programming requires:</p> <ul> <li>Minimal linux-based/FreeBSD/OpenBSD operating system</li> <li>A posix compliant shell (recommended), such as dash. Bash is good as well, albeit not stricly POSIX.</li> <li>C</li> <li>Make</li> <li>Git</li> <li>The UNIX core utilities</li> <li>tmux, vim, gdb, valgrind</li> </ul>"},{"location":"Links/#books-used","title":"Books used","text":"<ul> <li>The C Programming Language K&amp;R 2nd Edition</li> <li>Understanding and Using C pointers by Richard Reese</li> <li>Pointers on C, 1st Edition, by Kenneth Reek</li> <li>Practical C programming</li> <li>C in a nutshell</li> <li>21st Century C</li> <li>Mastering Algorithms With C</li> <li>Numerical Recipes In C The Art Of ... 2nd edition, W. Press, S. Teukolsky, W. Vetterling, B. Flannery</li> <li>Algorithms + Data Structure = Programs</li> <li>The missing semester</li> </ul>"},{"location":"Links/#helpful-external-resources","title":"Helpful External Resources","text":"<ul> <li>Command line environment</li> <li>Course of Systems Programming by Notre Dame University</li> <li>Great practical ideas in Computer Science by CMU</li> <li>The UNIX philosophy</li> <li>The FreeBSD manual</li> <li>The Gentoo Handbook</li> <li>The Archwiki</li> <li>THE Ultimate Book List</li> <li>Programming Concepts to know</li> <li>Teach yourself CS</li> <li>MATLAB examples</li> <li>Diagrams of all sorts (ER, flowchart, UML)</li> <li>Minimalist graphics library</li> <li>Thinkpad wiki</li> <li>CLI design guidelines</li> </ul>"},{"location":"Links/#the-unix-command-line-shell-scripting","title":"The UNIX command line (shell scripting)","text":"<ul> <li>Pure Shell Bible by Dylan Araps</li> <li>commandlinefu</li> <li>learning the shell</li> <li>Shell commands explained</li> <li>Terminals are sexy</li> <li>Various Linux tutorials</li> <li>cheat sheet shell</li> </ul>"},{"location":"Links/#practice-regular-expressions","title":"Practice Regular Expressions","text":"<ul> <li>RegexGolf</li> <li>Regexone</li> <li>Regex101</li> </ul>"},{"location":"Links/#latex-and-markdown","title":"Latex and Markdown","text":"<ul> <li>Free latex editor (although worse than the Make and Vi approach)</li> <li>Latex tutorial</li> <li>Markdown tutorial</li> <li>Handwritten formula classification to Latex</li> <li>Math Editor for Latex</li> <li>Latex AMS</li> <li>Latex AMS: short guide</li> </ul>"},{"location":"Links/#make","title":"Make","text":"<ul> <li>Makefile tutorial</li> <li>GNU Make documentation</li> <li>make</li> <li>Generic C Project template</li> <li>Simple Project Structure in C</li> <li>Simple Project Structure in Cpp</li> </ul>"},{"location":"Links/#git-and-mercurial","title":"Git and Mercurial","text":"<ul> <li>Mercurial short guide</li> <li>Git learning material</li> <li>Interactive Git learning</li> <li>Progit book</li> </ul>"},{"location":"Links/#competitive-programming","title":"Competitive Programming","text":"<ul> <li>Learn C++</li> <li>C++ book list</li> <li>FANG interview questions</li> <li>Competitive Programmer's handbook</li> <li>Nice quora question</li> <li>Competitive programming algorithms (cp-algorithms.com)</li> <li>Programming Challenges, Skiena</li> <li>National University of Singapore book on Competitive Programming </li> <li>Practice: cses.fi</li> <li>Practice: codewars.com</li> <li>Practice: adventofcode.com</li> <li>Practice: Codeforces</li> <li>Practice: Codeforces ladder</li> <li>Practice: Project Euler</li> <li>Practice: AtCoder</li> </ul>"},{"location":"Links/#project-based-learning","title":"Project based learning","text":"<ul> <li>From the Transistor by George Hotz</li> <li>Aggregator of project tutorials</li> <li>Projects list for beginners</li> <li>Projects from Scratch</li> <li>Build your own X</li> <li>Shell</li> <li>Text Editor</li> <li>Interpreter</li> <li>Compiler</li> <li>Compiler 2</li> <li>Build System</li> <li>Database</li> <li>Building a Web Browser</li> <li>Physically based rendering book (Computer Graphics)</li> <li>Emacs</li> <li>SQLbolt</li> </ul>"},{"location":"Links/#where-to-find-software","title":"Where to find software","text":"<ul> <li>Text Editors</li> <li>Suckless recommandations</li> <li>Good software according to cat-v.org</li> <li>Alternatives list</li> <li>Other list of recommandations</li> <li>Linux ricing guide</li> <li>Uses This</li> <li>Modern UNIX utilities</li> <li>\"The Book of Secret Knowledge\"</li> </ul>"},{"location":"Links/#java","title":"Java","text":"<ul> <li>Which Open JDK distribution to pick up?</li> <li>Recommended JDK distribution: Amazon Corretto 8</li> <li>Maven Documentation</li> <li>Quick Maven Tutorial</li> <li>Java 8 standard API documentation</li> <li>Java 8 tutorial</li> </ul>"},{"location":"Links/#licencing-software","title":"Licencing Software","text":"<ul> <li>Licencing a repository: GitHub</li> <li>Opensource licencing</li> <li>Choose a Licence</li> </ul>"},{"location":"Make/","title":"Make","text":"<p>There are many build systems out there, such as bazel, Maven, CMake  and so on so forth. Make is the standard build system, used by many, especially after GNU Make, and implementation of it, popularized it.</p>"},{"location":"MkDocs/","title":"MkDocs","text":"<p>For full documentation visit mkdocs.org. Look out for: mkdocs material.</p>"},{"location":"MkDocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"MkDocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"SSH_GPG/","title":"SSH and GPG","text":"<p>SSH is a protocol that used to connect to servers. GPG (gnu privacy guard) is an open source implementation of PGP.</p>"},{"location":"SSH_GPG/#ssh","title":"SSH","text":""},{"location":"SSH_GPG/#key-generation","title":"Key generation","text":"<p>In order to provide a public key, each user in your system must generate one. You should check to make sure you don\u2019t already have a key. By default, a user\u2019s SSH keys are stored in that user\u2019s ~/.ssh directory. You\u2019re looking for a pair of files named something like id_dsa or id_rsa and a matching file with a .pub extension. The .pub file is your public key, and the other file is your private key. If you don't have these, go to the $HOME dir and:</p> <pre><code>cd $HOME/.ssh\nls\nssh-keygen\n</code></pre> <p>It will ask you for a location with a name. You choose $(HOME)/.ssh/id_rsa. Click return 2 times.</p> <pre><code>ls\nid_rsa id_rsa.pub\n</code></pre> <p>So: id_rsa -&gt; private key, id_rsa.pub -&gt; public key. Never ever share the private key. When on Windows, use git bash. On a UNIX sys do this:</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Say yes, and then try to download a repo with SSH. If you have problems:</p> <ul> <li> <p>Testing your SSH connection</p> </li> <li> <p>Generating Multiple keys for different remote servers to connect to</p> </li> </ul>"},{"location":"SSH_GPG/#multiple-ssh-keys-for-different-servers","title":"Multiple SSH keys for different servers","text":"<p>You have 3 accounts in 3 hosting services. You need a key for each of those. This Method works also for n accounts. This guide is being taylored for Windows-based operating systems.</p>"},{"location":"SSH_GPG/#powershell-as-admin","title":"Powershell as Admin","text":"<p>In Windows PowerShell (run as admin):</p> <ul> <li>Check the current status of ssh-agent:</li> </ul> <pre><code>   Get-Service | ?{$_.Name -like '*ssh-agent*'} | select -Property Name, StartType, Status\n</code></pre> <ul> <li>Enable the Service if it is disabled:</li> </ul> <pre><code>   Set-Service -Name ssh-agent -StartupType Manual\n</code></pre> <ul> <li>Start the Service:</li> </ul> <pre><code>   Start-Service ssh-agent\n</code></pre> <ul> <li>Add your key as before:</li> </ul> <pre><code>   ssh-add &lt;path to the key&gt;\n</code></pre>"},{"location":"SSH_GPG/#create-ssh-keys-for-all-accounts","title":"Create SSH keys for all accounts","text":"<p>First make sure your current directory is your .ssh folder.</p> <pre><code>    cd ~/.ssh\n</code></pre> <p>Syntax for generating unique ssh key for ann account is:</p> <pre><code>     ssh-keygen -t rsa -C \"your-email-address\" -f \"github-username\"\n</code></pre> <p>here,</p> <p>-C stands for comment to help identify your ssh key</p> <p>-f stands for the file name where your ssh key get saved</p>"},{"location":"SSH_GPG/#now-generating-ssh-keys-for-my-two-accounts","title":"Now generating SSH keys for my two accounts","text":"<pre><code>     ssh-keygen -t rsa -C \"first_email@gmail.com\" -f \"github-first-account\"\n     ssh-keygen -t rsa -C \"second_email@gmail.com\" -f \"github-second-personal\"\n</code></pre> <p>Notice here first-account and second-account are the username of my github accounts corresponding to first-account@gmail.com and second-account@gmail.com email ids respectively.</p> <p>After entering the command the terminal will ask for passphrase, leave it empty and proceed.</p>"},{"location":"SSH_GPG/#add-ssh-keys-to-ssh-agent","title":"Add SSH keys to SSH Agent","text":"<p>Now we have the keys but it cannot be used until we add them to the SSH Agent. Note: the \"-k\" flag is lowercase on Windows and uppercase on UNIX shells (As it worked for me).</p> <pre><code>     ssh-add -k ~/.ssh/github-first-account\n     ssh-add -k ~/.ssh/github-second-account\n</code></pre> <p>You can read more about adding keys to SSH Agent here.</p>"},{"location":"SSH_GPG/#add-ssh-public-key-to-the-github","title":"Add SSH public key to the Github","text":"<p>For the next step we need to add our public key (that we have generated in our previous step) and add it to corresponding github accounts.</p> <p>For doing this we need to:</p> <ul> <li>Copy the public key to the clipboard</li> </ul> <p>We can copy the public key by opening the github-rahul-office.pub file in nvim and then copying the content of it.</p> <pre><code>     nvim ~/.ssh/github-first-account.pub\n     nvim ~/.ssh/github-second-account.pub\n</code></pre> <p>And then, paste the public key on Github.</p> <ol> <li> <p>Sign in to Github Account</p> </li> <li> <p>Go to Settings &gt; SSH and GPG keys &gt; New SSH Key</p> </li> <li> <p>Paste your copied public key and give it a Title of your choice.</p> </li> </ol>"},{"location":"SSH_GPG/#create-a-config-file-and-make-host-entries","title":"Create a Config File and Make Host Entries","text":"<p>The ~/.ssh/config file allows us specify many config options for SSH.</p> <p>If config file not already exists then create one (make sure you are in ~/.ssh directory)</p> <pre><code>     touch config\n</code></pre> <p>The commands below opens config in your default editor....Likely TextEdit, VS Code.</p> <pre><code>     open config\n</code></pre> <p>Now we need to add these lines to the file, each block corresponding to each account we created earlier.</p> <pre><code>     #first-account\n     Host github.com-first-account\n          HostName github.com\n          User git\n          IdentityFile ~/.ssh/github-first-account\n\n     #second-account\n     Host github.com-second-account\n          HostName github.com\n          User git\n          IdentityFile ~/.ssh/github-second-account\n</code></pre>"},{"location":"SSH_GPG/#handling-git","title":"Handling Git","text":"<p>From now on, to ensure that our commits and pushes from each repository on the system uses the correct GitHub user \u2014 we will have to configure user.email and user.name in every repository freshly cloned or existing before.</p> <p>To do this use the following commands.</p> <pre><code>     git config user.email \"first-account@gmail.com\"\n     git config user.name \"first-account Name\"\n\n     git config user.email \"second-account@gmail.com\"\n     git config user.name \"second-account Name\"\n</code></pre> <p>Pick the correct pair for your repository accordingly.</p> <p>To push or pull to the correct account we need to add the remote origin to the project</p> <pre><code>     git remote add origin git@github.com-first-account:first-account\n\n     git remote add origin git@github.com-second-account:second-account\n</code></pre> <p>Now you can use:</p> <pre><code>     git push\n\n     git pull\n</code></pre>"},{"location":"SSH_GPG/#references","title":"References","text":"<ul> <li>(1)</li> <li>(2)</li> </ul>"},{"location":"SSH_GPG/#gpg-gnu-privacy-guard","title":"GPG (GNU privacy guard)","text":"<p>First off, we need to generate a key pair. A key pair is composed by a private key and a public key.</p> <pre><code>gpg --full-gen-key\n</code></pre> <p>It will generate a file, usually, in the $(HOME)/.gnupg directory.</p>"},{"location":"Compilation%20Process/Basics/","title":"Basics","text":""},{"location":"Compilation%20Process/Basics/#references","title":"References","text":"<ul> <li>Inlcude guard (wikipedia link)</li> <li>Systems Programming in UNIX Linux by K.C. Wang, Springer</li> </ul>"},{"location":"Compilation%20Process/Basics/#lets-take-two-files-to-start-with","title":"Let's take two files to start with","text":"<pre><code>gcc Script01.c Script02.c\n</code></pre> <pre><code>gcc Script01.c Script02.c\n</code></pre>"},{"location":"Compilation%20Process/Basics/#simple-convert-into-a-binary-executable","title":"Simple convert into a binary executable","text":"<pre><code>gcc Script01.c Script02.c\n</code></pre> <p>or ..</p> <pre><code>tcc Script01.c Script02.c\n</code></pre>"},{"location":"Compilation%20Process/Basics/#statically-linked-library","title":"Statically linked library","text":"<ul> <li>First step: compile Script02.c into Script02.o, important using the '-c' flag</li> </ul> <pre><code>gcc -c Script02.c\n</code></pre> <ul> <li>Second step: create a Statically Linked Library with Script02.o as a member of it</li> </ul> <pre><code>ar rcs libmylib.a Script02.o\n</code></pre> <ul> <li>Third step: Static compile-link Script01.c with libmylib.a as a linked library</li> <li>'-static' specifies that is being statically linked</li> <li>'-L.' specifies the library path (current directory .)</li> <li>'-l' specifies the library</li> <li>'mylib' is specified without the prefex lib, as well as the suffix .a</li> </ul> <pre><code>gcc -static Script01.c -L. -lmylib\n</code></pre> <ul> <li>Fourth step: run the result, i.e. a.out, as usual</li> </ul> <pre><code>./a.out\n</code></pre>"},{"location":"Compilation%20Process/Basics/#dynamic-linking","title":"Dynamic Linking","text":"<ul> <li>First step: compile Script02.c into Script02.o, -fPIC compile to Position Independent Code Script02.o</li> </ul> <pre><code>gcc -c -fPIC Script02.c\n</code></pre> <ul> <li>Second step: create a shared (-shared) Dinamically Linked Library (.so) with Script02.o as a member of it</li> </ul> <pre><code>gcc -shared -o libmylib.so Script02.o\n</code></pre> <ul> <li>Third step: Static compile-link Script01.c with libmylib.a as a linked library</li> <li>'-L.' specifies the library path (current directory . or you can specify it)</li> <li>'-l' specifies the library as seen next</li> <li>'-lmylib' is specified without the prefex lib, as well as the suffix .a</li> </ul> <pre><code>gcc Script01.c -L. -lmylib\n</code></pre> <ul> <li>Third-2 step: exporting the LD_LIBRARY = ./</li> <li>If the library is not in the curent directory set LD_LIBRARY_PATH to point to the directory containing the library</li> </ul> <pre><code>export LD_LIBRARY_PATH = ./\n</code></pre> <ul> <li>Fourth step: run the result, i.e. a.out, as usual</li> </ul> <pre><code>./a.out\n</code></pre>"},{"location":"Shell/Chapter_01/","title":"Starting Shell Programming","text":"<p>Learning how to use sed, awk, grep, cat, fdisk and more</p>"},{"location":"Shell/Chapter_01/#tools-needed","title":"Tools needed","text":"<ul> <li>Shell: zsh, bash, ash, dash</li> <li>Any TUI text editor (Vim, Emacs, Nano ..)</li> <li>Any terminal emulator</li> </ul>"},{"location":"Shell/Chapter_01/#adding-to-path-any-folder-of-executable-scripts","title":"Adding to $PATH any folder of executable scripts","text":"<p>Open your \".zshrc\" or \".bashrc\". Ideally these two files are located in your ~/ folder. To add the folder named \"bin\" to the $PATH variable, just add the following to your configuration file</p> <pre><code>export PATH=\"$PATH:/home/username/bin\"\n</code></pre> <p>Now you can write your scripts in python, shell or other languages, making them executable and add the folder where these scripts are located to your $PATH environment variable to use them everywhere while browsing your filesystem with the shell</p> <p>If you have a script that launches a specific application, you can use symlinking and adding to $PATH to launch that application from anywhere in your file system</p> <pre><code>ln -s /home/username/programs/java/eclipse/eclipse /home/username/bin\n</code></pre>"},{"location":"Shell/Chapter_01/#chaning-resolution-of-the-screen-with-xrandr","title":"Chaning resolution of the screen with xrandr","text":"<p>Listing all possible resolution settings</p> <pre><code>xrandr\n</code></pre> <p>Listing the names of the active monitors</p> <pre><code>xrandr --listactivemonitors\n</code></pre> <p>Give an active monitor named \"eDP-1\", this sets the resolution at 1024x768</p> <pre><code>xrandr --output eDP-1 --mode 1024x768\n</code></pre>"},{"location":"Shell/Chapter_01/#getting-the-size-of-a-directory-on-the-command-line","title":"Getting the size of a directory on the command line","text":"<pre><code>du -s, --summarize\n        # display only a total for each argument\n\ndu -h, --human-readable\n        # print sizes in human readable format (e.g., 1K 234M 2G)\n\ndu -hs\n</code></pre>"},{"location":"Shell/Chapter_02/","title":"Arch linux","text":"<p>References:</p> <ul> <li>Gentoo AMD 64 handbook</li> <li>Archwiki</li> </ul> <p>The best guide to follow is the Archwiki, as it is always up to date. This guide, however, will give more explanations throughout the process, by spending more words for each step.</p>"},{"location":"Shell/Chapter_02/#setting-the-keymap","title":"Setting the keymap","text":"<p>When in \"root@archiso\", list all of the available keymaps:</p> <pre><code>ls /usr/share/kbd/keymaps/**/*.map.gz\n</code></pre> <p>loadkeys: it-latin1</p>"},{"location":"Shell/Chapter_02/#internet-through-the-smartphone-tethering","title":"Internet through the Smartphone tethering","text":"<ul> <li>Setting up the internet</li> </ul> <p>We enter the deamon called \"iwd\" which then appears as a prompt where we input commands</p> <pre><code>iwctl\n</code></pre> <p>This command prompts out the list of wi-fi devices through which we can connect to a given network</p> <pre><code>device list\n</code></pre> <p>Let's call the device that we're using \"wlan0\", SSID is the name of the chosen network we want to connect, it then asks for a passphrase. More details about this on this link.</p> <pre><code>station wlan0 scan\nstation wlan0 get-networks\n# SSID is the name of the Wi-Fi\nstation wlan0 connect SSID\n</code></pre>"},{"location":"Shell/Chapter_02/#checking-network-connection","title":"Checking Network connection","text":"<p>After connecting, type \"exit\" while on the iwd daemon to quit the program, then, as root user, type the following to check out if the connection was successful.</p> <pre><code>ping google.com\n</code></pre>"},{"location":"Shell/Chapter_02/#making-sure-our-system-clock-is-accurate","title":"Making sure our system clock is accurate","text":"<pre><code>timedatectl set-ntp true\n</code></pre> <pre><code>timedatectl set-timezone Europe/Rome\n</code></pre> <p>Verify it with</p> <pre><code>timedatectl status\n</code></pre>"},{"location":"Shell/Chapter_02/#disk-partitioning-with-fdisk","title":"Disk partitioning with fdisk","text":"<p>/dev/sda is the name of the drive we want to partition, where it will be mounted the various parts of the system, among which \"/mnt\", where the OS will be mounted.</p> <pre><code>fdisk -l # listing all of our drives\nfdisk /dev/sda #the name of the Disk where I want to install Arch\n</code></pre> <p>Creating a new Label</p> <pre><code>g # to create a GPT partition table, for EFI\n</code></pre>"},{"location":"Shell/Chapter_02/#using-fdisk-to-create-three-partitions","title":"Using fdisk to create three partitions","text":""},{"location":"Shell/Chapter_02/#partitioning-the-efi-system-the-modern-bios-substitute","title":"Partitioning the EFI system (the modern BIOS substitute)","text":"<pre><code>n\n# input number \"1\"\n# press the enter key (default 2048)\n+550M # megabytes for the EFI partition # Don't input \"n\" again, there's a question .. answer \"yes\"\n</code></pre>"},{"location":"Shell/Chapter_02/#swap-partition","title":"Swap partition","text":"<pre><code>n\n2\n# enter (default 2048)\n+2G # two gigabytes for the swap partition\n</code></pre>"},{"location":"Shell/Chapter_02/#linux-file-system-partition","title":"Linux file system partition","text":"<pre><code>n\n3\n# enter (dafault 2048)\n# enter allocates the remaining storage for the linux file system\n</code></pre>"},{"location":"Shell/Chapter_02/#if-any-mistakes-are-being-made","title":"If any mistakes are being made","text":"<p>Se sbaglio ad assegnare il tipo di partizione delle prime due, posso sempre premere t e il numero della partizione alla quale devo cambiare il tipo:</p> <p>esempio: t 1 L per listare i tipi di partizione disponibili 1 per EFI System e cambia da linux file system a EFI System</p> <p>t 2 L per listare i tipi di partizione disponibili 19 per Linux swap e cambia da linux file system a Linux swap</p> <p>Alla fine premi w per scrivere sul disco le nostre impostazioni</p>"},{"location":"Shell/Chapter_02/#file-system","title":"File System","text":"<p>Ora dobbiamo creare i diversi tipi di File System rispettivamente per ogni partizione che abbiamo creato:</p> <p>Creating the file system Fat 32 in sda1</p> <pre><code>mkfs.fat -F32 /dev/sda1\n</code></pre> <p>Create the SWAP partition in sda2</p> <pre><code>mkswap /dev/sda2\n</code></pre> <p>Activate the SWAP partition</p> <pre><code>swapon /dev/sda2\n</code></pre> <p>Creating the File System in sda3</p> <pre><code>mkfs.ext4 /dev/sda3\n</code></pre> <p>Mount the file system</p> <pre><code>mount /dev/sda3 /mnt\n</code></pre> <p>Installing the base system with pacstrap</p> <pre><code>pacstrap /mnt base linux linux-firmware\n</code></pre>"},{"location":"Shell/Chapter_02/#generating-system-tabular-file-fstab-which-gives-infos-on-our-partitioning","title":"Generating system tabular file fstab which gives infos on our partitioning:","text":"<pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre> <p>Ora diventiamo root della nostra installazione, ovvero passiamo dalla pendrive alla partizione /dev/sda3: arch-chroot /mnt</p> <p>Ora il prompt dovrebbe essere cambiato, perch\u00e9 siamo nel nostro sistema operativo di base nella nostra partizione /dev/sda3 dentro il nostro file system</p>"},{"location":"Shell/Chapter_02/#locale","title":"Locale","text":"<p>Setting the time-zone</p> <pre><code>ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime\n</code></pre> <p>If I had to list them all</p> <pre><code>ls /usr/share/zoneinfo\n</code></pre> <p>System clock settings:</p> <pre><code>hwclock --systohc\n</code></pre>"},{"location":"Shell/Chapter_02/#install-neovim","title":"Install neovim","text":"<pre><code>pacman -Sy neovim\n</code></pre>"},{"location":"Shell/Chapter_02/#install-iwd","title":"Install iwd","text":"<pre><code>pacman -Sy iwd\n</code></pre>"},{"location":"Shell/Chapter_02/#setting-up-the-locale","title":"Setting up the Locale","text":"<pre><code>vim /etc/locale.gen\nen_US.UTF-8 UTF-8\n</code></pre> <p>Now activate the locale.gen </p> <pre><code>locale-gen\n</code></pre> <p>Creating a config file on /etc/hostname</p> <pre><code>vim /etc/hostname\n# I could write, for example:\nt440p\n</code></pre>"},{"location":"Shell/Chapter_02/#modifichiamo-il-file-hosts","title":"Modifichiamo il file hosts","text":"<pre><code>vim /etc/hosts\n  ```\n\nAnd I write on it the following..\n\n```shell\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 t440p.localdomain t440p\n</code></pre>"},{"location":"Shell/Chapter_02/#creating-the-users-with-their-relative-passwords","title":"Creating the Users with their relative passwords","text":"<p>The default user is the root user. To create other users Ora devo creare diversi utenti e una password, altrimenti ci sar\u00e0 solo 1 utente, ovvero il root Per la password root basta passwd senza nessun parametro da linea di comando: passwd 3394 Per l'utente: useradd -m angelo Creo password utente: passwd angelo 3394</p> <p>Checkpoint 21:20</p> <p>Su Unix ci sono vari gruppi ai quali gli utenti possono partecipare. usermod \u00e8 il comando in questione. Aggiungo l'utente angelo ai seguenti gruppi: usermod -aG wheel,audio,video,optical,storage angelo Edito il file sudoers dove sudo attribuisce i privilegi, e io voglio dare all'utente angelo il privilegio di usare sudo: visudo Tolgo il commento da:</p> <pre><code># %wheel ALL=(ALL) ALL // Da rivedere bene ..\n</code></pre>"},{"location":"Shell/Chapter_02/#install-sudo","title":"Install sudo","text":"<pre><code>pacman -S sudo\n</code></pre>"},{"location":"Shell/Chapter_02/#install-grub","title":"Install grub","text":"<pre><code>pacman -S grub\n</code></pre>"},{"location":"Shell/Chapter_02/#installing-other-useful-packages","title":"Installing other useful packages","text":"<pre><code>pacman -S efibootmgr dosfstools os-prober mtools\n</code></pre>"},{"location":"Shell/Chapter_02/#mounting-the-efi-partition","title":"Mounting the EFI partition","text":"<p>mkdir /boot/EFI mount /dev/sda1 /boot/EFI This doesn't work (don't know why): grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck</p> <p>Heads up for those with MSI boards, apparently for some MSI bios versions it doesn't  recognize the standard grub installation path so it would boot to the bios, bypassing grub completely.  Luckily it's a simple fix you have to add --removable so the right command be  \"grub-install --target=x86_64-efi --removeable --bootloader-id=grub_uefi --recheck\".  Credit goes to Ryan in the comments of the Open  Source Home's tutorial of how to install arch that video is also here on Youtube. This works: grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/EFI --removable Creo il file delle configurazioni di grub: grub-mkconfig -o /boot/grub/grub.cfg</p> <p>Install iwd onto the machine before leaving the live installation process https://bbs.archlinux.org/viewtopic.php?id=187798</p> <p>Install network manager: pacman -S networkmanager vim xorg</p> <p>Enable networkmanager with systemd: systemctl enable NetworkManager systemctl enable iwd</p> <p>exit the chroot exit</p> <p>Unmount umount -l /mnt</p> <p>Ora ci sono due strade: 1) reboot se sei con un vero pc</p> <p>2) shutdown now se sei in una VM vai su storage clicca sulla iso e rimuove lo storage e restart</p> <p>Linux Drive and Partition Config (dd, fdisk, resize2fs, lsblk, tune2fs and more) Sed, Awk, Grep, Cat, gpg, ssh, git, make, zsh</p>"}]}