{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This repository contains all of the fundamentals to learn how to use the tools for introductory Systems Administration, which is essential in the process of building software.","title":"Welcome"},{"location":"#welcome","text":"This repository contains all of the fundamentals to learn how to use the tools for introductory Systems Administration, which is essential in the process of building software.","title":"Welcome"},{"location":"Arch/","text":"Arch linux References: Gentoo AMD 64 handbook Archwiki Linux Drive and Partition Config (dd, fdisk, resize2fs, lsblk, tune2fs and more) Sed, Awk, Grep, Cat, gpg, ssh, git, make, zsh Setting the keymap List all of the available keymaps: root@archiso $ ls /usr/share/kbd/keymaps/* / .map.gz loadkeys: it-latin1 Internet through the Smartphone tethering Setting up the internet iwctl device list station device scan station device get-networks station device connect SSID Checking Network connection ping google.com Making sure our system clock is accurate timedatectl set-ntp true Verify it with timedatectl status Partitioning our disk with fdisk or cfdisk /dev/sda is the name of the drive we want to partition, where it will be mounted the various parts of the system, among which \"/mnt\", where the OS will be mounted. fdisk -l # listing all of our drives fdisk /dev/sda #the name of the Disk where I want to install Arch Creating a new Label g # to create a GPT partition table, for EFI Using fdisk to create three partitions Partitioning the EFI system (the modern BIOS substitute) n # input number \"1\" # press the enter key (default 2048) +550M # megabytes for the EFI partition # Don't input \"n\" again, there's a question .. answer \"yes\" Creo la partizione swap: n 2 enter (default 2048) +2G due gigabytes per la partizione swap Creo la partizione per il mio sistema, concedo il resto della memoria: n 3 enter (dafault 2048) enter e da' lo spazio rimanente deve essere di tipo linux file system Se sbaglio ad assegnare il tipo di partizione delle prime due, posso sempre premere t e il numero della partizione alla quale devo cambiare il tipo: esempio: t 1 L per listare i tipi di partizione disponibili 1 per EFI System e cambia da linux file system a EFI System t 2 L per listare i tipi di partizione disponibili 19 per Linux swap e cambia da linux file system a Linux swap Alla fine premi w per scrivere sul disco le nostre impostazioni Ora dobbiamo creare i diversi tipi di File System rispettivamente per ogni partizione che abbiamo creato: Ora si deve creare il file system Fat 32 su sda1: mkfs.fat -F32 /dev/sda1 Ora si deve creare lo swap nella partizione dedita allo swap: mkswap /dev/sda2 attivo la partizione swap: swapon /dev/sda2 Creo il file system nella 3 partizione: mkfs.ext4 /dev/sda3 Mount the file system: mount /dev/sda3 /mnt Ora che \u00e8 montato, installo il sistema di base con pacstrap: pacstrap /mnt base linux linux-firmware Ora generiamo il nostro file system tabular fstab (informazioni sulla partizione): genfstab -U /mnt >> /mnt/etc/fstab Ora diventiamo root della nostra installazione, ovvero passiamo dalla pendrive alla partizione /dev/sda3: arch-chroot /mnt Ora il prompt dovrebbe essere cambiato, perch\u00e9 siamo nel nostro sistema operativo di base nella nostra partizione /dev/sda3 dentro il nostro file system Ora devo settare la time zone: ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime (se devo listare allora: ls /usr/share/zoneinfo) System clock settings: hwclock --systohc installa vim per editare dei files: pacman -Sy neovim vim /etc/locale.gen, ogni linea di codice \u00e8 commentata, devo togliere il commento seguente, per arch americano: en_US.UTF-8 UTF-8 Minuto 18:10 (checkpoint) Ora entra questo comando, per attivare il locale.gen locale-gen Ora dobbiamo creare un config file su /etc/hostname vim /etc/hostname scrivo ad esempio: t440p Modifichiamo il file hosts vim /etc/hosts E riporto le seguenti.. 127.0.0.1 localhost ::1 localhost 127.0.1.1 t440p.localdomain t440p Ora devo creare diversi utenti e una password, altrimenti ci sar\u00e0 solo 1 utente, ovvero il root Per la password root basta passwd senza nessun parametro da linea di comando: passwd 3394 Per l'utente: useradd -m angelo Creo password utente: passwd angelo 3394 Checkpoint 21:20 Su Unix ci sono vari gruppi ai quali gli utenti possono partecipare. usermod \u00e8 il comando in questione. Aggiungo l'utente angelo ai seguenti gruppi: usermod -aG wheel,audio,video,optical,storage angelo Edito il file sudoers dove sudo attribuisce i privilegi, e io voglio dare all'utente angelo il privilegio di usare sudo: visudo Tolgo il commento da: # %wheel ALL=(ALL) ALL // Da rivedere bene .. Installo sudo: pacman -S sudo Installo grub: pacman -S grub Installo altri pacchetti utili: pacman -S efibootmgr dosfstools os-prober mtools Mounting the EFI partition: mkdir /boot/EFI mount /dev/sda1 /boot/EFI This doesn't work (don't know why): grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck Heads up for those with MSI boards, apparently for some MSI bios versions it doesn't recognize the standard grub installation path so it would boot to the bios, bypassing grub completely. Luckily it's a simple fix you have to add --removable so the right command be \"grub-install --target=x86_64-efi --removeable --bootloader-id=grub_uefi --recheck\". Credit goes to Ryan in the comments of the Open Source Home's tutorial of how to install arch that video is also here on Youtube. This works: grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/EFI --removable Creo il file delle configurazioni di grub: grub-mkconfig -o /boot/grub/grub.cfg Install network manager: pacman -S networkmanager vim xorg Enable networkmanager with systemd: systemctl enable NetworkManager exit the chroot exit Unmount umount -l /mnt Ora ci sono due strade: 1) reboot se sei con un vero pc 2) shutdown now se sei in una VM vai su storage clicca sulla iso ed rimuove lo storage e restart","title":"Arch linux"},{"location":"Arch/#arch-linux","text":"References: Gentoo AMD 64 handbook Archwiki Linux Drive and Partition Config (dd, fdisk, resize2fs, lsblk, tune2fs and more) Sed, Awk, Grep, Cat, gpg, ssh, git, make, zsh","title":"Arch linux"},{"location":"Arch/#setting-the-keymap","text":"List all of the available keymaps: root@archiso $ ls /usr/share/kbd/keymaps/* / .map.gz loadkeys: it-latin1","title":"Setting the keymap"},{"location":"Arch/#internet-through-the-smartphone-tethering","text":"Setting up the internet iwctl device list station device scan station device get-networks station device connect SSID","title":"Internet through the Smartphone tethering"},{"location":"Arch/#checking-network-connection","text":"ping google.com","title":"Checking Network connection"},{"location":"Arch/#making-sure-our-system-clock-is-accurate","text":"timedatectl set-ntp true Verify it with timedatectl status","title":"Making sure our system clock is accurate"},{"location":"Arch/#partitioning-our-disk-with-fdisk-or-cfdisk","text":"/dev/sda is the name of the drive we want to partition, where it will be mounted the various parts of the system, among which \"/mnt\", where the OS will be mounted. fdisk -l # listing all of our drives fdisk /dev/sda #the name of the Disk where I want to install Arch Creating a new Label g # to create a GPT partition table, for EFI","title":"Partitioning our disk with fdisk or cfdisk"},{"location":"Arch/#using-fdisk-to-create-three-partitions","text":"Partitioning the EFI system (the modern BIOS substitute) n # input number \"1\" # press the enter key (default 2048) +550M # megabytes for the EFI partition # Don't input \"n\" again, there's a question .. answer \"yes\" Creo la partizione swap: n 2 enter (default 2048) +2G due gigabytes per la partizione swap Creo la partizione per il mio sistema, concedo il resto della memoria: n 3 enter (dafault 2048) enter e da' lo spazio rimanente deve essere di tipo linux file system Se sbaglio ad assegnare il tipo di partizione delle prime due, posso sempre premere t e il numero della partizione alla quale devo cambiare il tipo: esempio: t 1 L per listare i tipi di partizione disponibili 1 per EFI System e cambia da linux file system a EFI System t 2 L per listare i tipi di partizione disponibili 19 per Linux swap e cambia da linux file system a Linux swap Alla fine premi w per scrivere sul disco le nostre impostazioni Ora dobbiamo creare i diversi tipi di File System rispettivamente per ogni partizione che abbiamo creato: Ora si deve creare il file system Fat 32 su sda1: mkfs.fat -F32 /dev/sda1 Ora si deve creare lo swap nella partizione dedita allo swap: mkswap /dev/sda2 attivo la partizione swap: swapon /dev/sda2 Creo il file system nella 3 partizione: mkfs.ext4 /dev/sda3 Mount the file system: mount /dev/sda3 /mnt Ora che \u00e8 montato, installo il sistema di base con pacstrap: pacstrap /mnt base linux linux-firmware Ora generiamo il nostro file system tabular fstab (informazioni sulla partizione): genfstab -U /mnt >> /mnt/etc/fstab Ora diventiamo root della nostra installazione, ovvero passiamo dalla pendrive alla partizione /dev/sda3: arch-chroot /mnt Ora il prompt dovrebbe essere cambiato, perch\u00e9 siamo nel nostro sistema operativo di base nella nostra partizione /dev/sda3 dentro il nostro file system Ora devo settare la time zone: ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime (se devo listare allora: ls /usr/share/zoneinfo) System clock settings: hwclock --systohc installa vim per editare dei files: pacman -Sy neovim vim /etc/locale.gen, ogni linea di codice \u00e8 commentata, devo togliere il commento seguente, per arch americano: en_US.UTF-8 UTF-8 Minuto 18:10 (checkpoint) Ora entra questo comando, per attivare il locale.gen locale-gen Ora dobbiamo creare un config file su /etc/hostname vim /etc/hostname scrivo ad esempio: t440p","title":"Using fdisk to create three partitions"},{"location":"Arch/#modifichiamo-il-file-hosts","text":"vim /etc/hosts E riporto le seguenti.. 127.0.0.1 localhost ::1 localhost 127.0.1.1 t440p.localdomain t440p Ora devo creare diversi utenti e una password, altrimenti ci sar\u00e0 solo 1 utente, ovvero il root Per la password root basta passwd senza nessun parametro da linea di comando: passwd 3394 Per l'utente: useradd -m angelo Creo password utente: passwd angelo 3394 Checkpoint 21:20 Su Unix ci sono vari gruppi ai quali gli utenti possono partecipare. usermod \u00e8 il comando in questione. Aggiungo l'utente angelo ai seguenti gruppi: usermod -aG wheel,audio,video,optical,storage angelo Edito il file sudoers dove sudo attribuisce i privilegi, e io voglio dare all'utente angelo il privilegio di usare sudo: visudo Tolgo il commento da: # %wheel ALL=(ALL) ALL // Da rivedere bene .. Installo sudo: pacman -S sudo Installo grub: pacman -S grub Installo altri pacchetti utili: pacman -S efibootmgr dosfstools os-prober mtools Mounting the EFI partition: mkdir /boot/EFI mount /dev/sda1 /boot/EFI This doesn't work (don't know why): grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck Heads up for those with MSI boards, apparently for some MSI bios versions it doesn't recognize the standard grub installation path so it would boot to the bios, bypassing grub completely. Luckily it's a simple fix you have to add --removable so the right command be \"grub-install --target=x86_64-efi --removeable --bootloader-id=grub_uefi --recheck\". Credit goes to Ryan in the comments of the Open Source Home's tutorial of how to install arch that video is also here on Youtube. This works: grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/EFI --removable Creo il file delle configurazioni di grub: grub-mkconfig -o /boot/grub/grub.cfg Install network manager: pacman -S networkmanager vim xorg Enable networkmanager with systemd: systemctl enable NetworkManager exit the chroot exit Unmount umount -l /mnt Ora ci sono due strade: 1) reboot se sei con un vero pc 2) shutdown now se sei in una VM vai su storage clicca sulla iso ed rimuove lo storage e restart","title":"Modifichiamo il file hosts"},{"location":"Docker/","text":"Docker","title":"Docker"},{"location":"Docker/#docker","text":"","title":"Docker"},{"location":"Git/","text":"Git Add new remotes: git remote add gitlab git@gitlab.com:Username/Repo.git git remote add github git@github.com:Username/Repo.git To push over gitlab/github master: git push gitlab master git push github master To list all of the remotes for a repository: git remote -v Listing branches: git branch #To see local branches git branch -r #To see branches git branch -a #To see both local and remote branches The easiest way to switch branch on Git is to use the \u201cgit checkout\u201d command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to append the \u201c-b\u201d option, otherwise you won\u2019t be able to switch to that branch. git checkout <existing_branch> Create new branch: git checkout -b \"<new_branch>\" to add : https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase TODOs: Git worktree, git bare repository, git submodules git basic configuration When you install git for the first time on the new machine. Set the default command line editor as vim. git config --global core.editor vim git config --global user.name \"John Doe\" git config --global user.email \"john@doe.net\" git config --global color.ui \"auto\" To list all of the configs: git config --list git starter To start a new git project on github: git init add .gitignore for the files you don't want to commit git remote add 'name of the remote' www.github.com/angelobattaglia/progetto git remote set-url 'name of the remote' git@github.com:angelobattaglia/progetto.git git add -A or git add . git commit -a (-m \"first commit\") git push 'name of the remote' master If you want remove some file that you added to the .gitignore later: git rm --cached filetoremovefromthecache If you want to show all of the graph of commits just type: git log --all --graph --decorate (--oneline) Updating local repository from remote: git pull Working with Remote To see how many remote for a git repository: git remote -v To add a remote to a git repository with https: git remote add \"Remote 1\" www.github.com/angelo/progetto git remote add \"Remote 2\" www.gitlab.com/angelo/progetto In my case: git remote add origin www.github... Push: git push \"remote name\" \"branch name\" git push all Branching git branch 'new-branch-name' 'from-branch' To change from the current branch, for example, to another one use the argument \"checkout\": git checkout 'branchname' List all the branches of a given project: git branch -a git branch -r # list remote branches git branch # list local branches Local branches: colored white. Remote branches: colored red \"remotes/origin\" If you want to abort all current changes that aren't committed: git reset --hard If you just want to restore one file: git checkout filetorestore.txt Branch pointed as \"HEAD\" is the latest committed among all the branches How to merge You can merge one or more branches. In the current branch, run: git merge \"branch-one\" git merge \"branch-one\" \"branch-two\" How to make a pull request Find a project you want to contribute to Fork it Clone it to your local system Make a new branch Make your changes Push it back to your repo Click the Compare & pull request button Click Create pull request to open a new pull request Tagging a particular commit git tag \"tag name\" # Will tag the commit HEAD (the latest) if not specified otherwise git tag \"hash of the commit\" \"tag name\" # Will tag the specific commit tagged with that hash List all the tags: git tag","title":"Git"},{"location":"Git/#git","text":"Add new remotes: git remote add gitlab git@gitlab.com:Username/Repo.git git remote add github git@github.com:Username/Repo.git To push over gitlab/github master: git push gitlab master git push github master To list all of the remotes for a repository: git remote -v Listing branches: git branch #To see local branches git branch -r #To see branches git branch -a #To see both local and remote branches The easiest way to switch branch on Git is to use the \u201cgit checkout\u201d command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to append the \u201c-b\u201d option, otherwise you won\u2019t be able to switch to that branch. git checkout <existing_branch> Create new branch: git checkout -b \"<new_branch>\" to add : https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories-on-rebase TODOs: Git worktree, git bare repository, git submodules","title":"Git"},{"location":"Git/#git-basic-configuration","text":"When you install git for the first time on the new machine. Set the default command line editor as vim. git config --global core.editor vim git config --global user.name \"John Doe\" git config --global user.email \"john@doe.net\" git config --global color.ui \"auto\" To list all of the configs: git config --list","title":"git basic configuration"},{"location":"Git/#git-starter","text":"To start a new git project on github: git init add .gitignore for the files you don't want to commit git remote add 'name of the remote' www.github.com/angelobattaglia/progetto git remote set-url 'name of the remote' git@github.com:angelobattaglia/progetto.git git add -A or git add . git commit -a (-m \"first commit\") git push 'name of the remote' master If you want remove some file that you added to the .gitignore later: git rm --cached filetoremovefromthecache If you want to show all of the graph of commits just type: git log --all --graph --decorate (--oneline) Updating local repository from remote: git pull","title":"git starter"},{"location":"Git/#working-with-remote","text":"To see how many remote for a git repository: git remote -v To add a remote to a git repository with https: git remote add \"Remote 1\" www.github.com/angelo/progetto git remote add \"Remote 2\" www.gitlab.com/angelo/progetto In my case: git remote add origin www.github... Push: git push \"remote name\" \"branch name\" git push all","title":"Working with Remote"},{"location":"Git/#branching","text":"git branch 'new-branch-name' 'from-branch' To change from the current branch, for example, to another one use the argument \"checkout\": git checkout 'branchname' List all the branches of a given project: git branch -a git branch -r # list remote branches git branch # list local branches Local branches: colored white. Remote branches: colored red \"remotes/origin\" If you want to abort all current changes that aren't committed: git reset --hard If you just want to restore one file: git checkout filetorestore.txt Branch pointed as \"HEAD\" is the latest committed among all the branches","title":"Branching"},{"location":"Git/#how-to-merge","text":"You can merge one or more branches. In the current branch, run: git merge \"branch-one\" git merge \"branch-one\" \"branch-two\"","title":"How to merge"},{"location":"Git/#how-to-make-a-pull-request","text":"Find a project you want to contribute to Fork it Clone it to your local system Make a new branch Make your changes Push it back to your repo Click the Compare & pull request button Click Create pull request to open a new pull request","title":"How to make a pull request"},{"location":"Git/#tagging-a-particular-commit","text":"git tag \"tag name\" # Will tag the commit HEAD (the latest) if not specified otherwise git tag \"hash of the commit\" \"tag name\" # Will tag the specific commit tagged with that hash List all the tags: git tag","title":"Tagging a particular commit"},{"location":"Links/","text":"Links An Opinionated Guide to Programming The operating system is our development environment. You can't control GUIs programmatically. You can't \"script\" GUIs. You can't create your own workflow. A command-line based approach to computer programming requires: Minimal linux-based/FreeBSD/OpenBSD operating system A posix compliant shell (recommended), such as dash. Bash is good as well, albeit not stricly POSIX. C Make Git The UNIX core utilities tmux , vim, gdb , valgrind Books used The C Programming Language K&R 2nd Edition Understanding and Using C pointers by Richard Reese Pointers on C, 1st Edition, by Kenneth Reek Practical C programming C in a nutshell 21st Century C Mastering Algorithms With C Numerical Recipes In C The Art Of ... 2nd edition, W. Press, S. Teukolsky, W. Vetterling, B. Flannery Algorithms + Data Structure = Programs The missing semester Helpful External Resources Command line environment Course of Systems Programming by Notre Dame University Great practical ideas in Computer Science by CMU The UNIX philosophy The FreeBSD manual The Gentoo Handbook The Archwiki THE Ultimate Book List Programming Concepts to know Teach yourself CS Diagrams of all sorts (ER, flowchart, UML) Minimalist graphics library Thinkpad wiki CLI design guidelines The UNIX command line (shell scripting) Pure Shell Bible by Dylan Araps commandlinefu learning the shell Shell commands explained Terminals are sexy Various Linux tutorials cheat sheet shell Practice Regular Expressions RegexGolf Regexone Regex101 Latex and Markdown Free latex editor (although worse than the Make and Vi approach) Latex tutorial Markdown tutorial Make Makefile tutorial GNU Make documentation make Generic C Project template Simple Project Structure in C Simple Project Structure in Cpp Git and Mercurial Mercurial short guide Git learning material Progit book Competitive Programming Learn C++ C++ book list FANG interview questions Competitive Programmer's handbook Nice quora question Competitive programming algorithms (cp-algorithms.com) Programming Challenges, Skiena National University of Singapore book on Competitive Programming Practice: cses.fi Practice: codewars.com Practice: adventofcode.com Practice: Codeforces Practice: Codeforces ladder Practice: Project Euler Practice: AtCoder Project based learning From the Transistor by George Hotz Aggregator of project tutorials Projects list for beginners Projects from Scratch Build your own X Shell Text Editor Interpreter Compiler Compiler 2 Build System Database Building a Web Browser Physically based rendering book (Computer Graphics) Emacs Where to find software Text Editors Suckless recommandations Good software according to cat-v.org Alternatives list Other list of recommandations Linux ricing guide Uses This Modern UNIX utilities \"The Book of Secret Knowledge\" Java Which Open JDK distribution to pick up? Recommended JDK distribution: Amazon Corretto 8 Maven Documentation Quick Maven Tutorial Java 8 standard API documentation Java 8 tutorial Licencing Software Licencing a repository: GitHub Opensource licencing Choose a Licence","title":"Links"},{"location":"Links/#links","text":"","title":"Links"},{"location":"Links/#an-opinionated-guide-to-programming","text":"The operating system is our development environment. You can't control GUIs programmatically. You can't \"script\" GUIs. You can't create your own workflow. A command-line based approach to computer programming requires: Minimal linux-based/FreeBSD/OpenBSD operating system A posix compliant shell (recommended), such as dash. Bash is good as well, albeit not stricly POSIX. C Make Git The UNIX core utilities tmux , vim, gdb , valgrind","title":"An Opinionated Guide to Programming"},{"location":"Links/#books-used","text":"The C Programming Language K&R 2nd Edition Understanding and Using C pointers by Richard Reese Pointers on C, 1st Edition, by Kenneth Reek Practical C programming C in a nutshell 21st Century C Mastering Algorithms With C Numerical Recipes In C The Art Of ... 2nd edition, W. Press, S. Teukolsky, W. Vetterling, B. Flannery Algorithms + Data Structure = Programs The missing semester","title":"Books used"},{"location":"Links/#helpful-external-resources","text":"Command line environment Course of Systems Programming by Notre Dame University Great practical ideas in Computer Science by CMU The UNIX philosophy The FreeBSD manual The Gentoo Handbook The Archwiki THE Ultimate Book List Programming Concepts to know Teach yourself CS Diagrams of all sorts (ER, flowchart, UML) Minimalist graphics library Thinkpad wiki CLI design guidelines","title":"Helpful External Resources"},{"location":"Links/#the-unix-command-line-shell-scripting","text":"Pure Shell Bible by Dylan Araps commandlinefu learning the shell Shell commands explained Terminals are sexy Various Linux tutorials cheat sheet shell","title":"The UNIX command line (shell scripting)"},{"location":"Links/#practice-regular-expressions","text":"RegexGolf Regexone Regex101","title":"Practice Regular Expressions"},{"location":"Links/#latex-and-markdown","text":"Free latex editor (although worse than the Make and Vi approach) Latex tutorial Markdown tutorial","title":"Latex and Markdown"},{"location":"Links/#make","text":"Makefile tutorial GNU Make documentation make Generic C Project template Simple Project Structure in C Simple Project Structure in Cpp","title":"Make"},{"location":"Links/#git-and-mercurial","text":"Mercurial short guide Git learning material Progit book","title":"Git and Mercurial"},{"location":"Links/#competitive-programming","text":"Learn C++ C++ book list FANG interview questions Competitive Programmer's handbook Nice quora question Competitive programming algorithms (cp-algorithms.com) Programming Challenges, Skiena National University of Singapore book on Competitive Programming Practice: cses.fi Practice: codewars.com Practice: adventofcode.com Practice: Codeforces Practice: Codeforces ladder Practice: Project Euler Practice: AtCoder","title":"Competitive Programming"},{"location":"Links/#project-based-learning","text":"From the Transistor by George Hotz Aggregator of project tutorials Projects list for beginners Projects from Scratch Build your own X Shell Text Editor Interpreter Compiler Compiler 2 Build System Database Building a Web Browser Physically based rendering book (Computer Graphics) Emacs","title":"Project based learning"},{"location":"Links/#where-to-find-software","text":"Text Editors Suckless recommandations Good software according to cat-v.org Alternatives list Other list of recommandations Linux ricing guide Uses This Modern UNIX utilities \"The Book of Secret Knowledge\"","title":"Where to find software"},{"location":"Links/#java","text":"Which Open JDK distribution to pick up? Recommended JDK distribution: Amazon Corretto 8 Maven Documentation Quick Maven Tutorial Java 8 standard API documentation Java 8 tutorial","title":"Java"},{"location":"Links/#licencing-software","text":"Licencing a repository: GitHub Opensource licencing Choose a Licence","title":"Licencing Software"},{"location":"Make/","text":"Make There are many build systems out there, such as bazel , Maven , CMake and so on so forth. Make is the standard build system, used by many, especially after GNU Make, and implementation of it, popularized it.","title":"Make"},{"location":"Make/#make","text":"There are many build systems out there, such as bazel , Maven , CMake and so on so forth. Make is the standard build system, used by many, especially after GNU Make, and implementation of it, popularized it.","title":"Make"},{"location":"MkDocs/","text":"MkDocs For full documentation visit mkdocs.org . Look out for: mkdocs material . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"MkDocs"},{"location":"MkDocs/#mkdocs","text":"For full documentation visit mkdocs.org . Look out for: mkdocs material .","title":"MkDocs"},{"location":"MkDocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"MkDocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"SSH_GPG/","text":"Introduction SSH is a protocol that used to connect to servers. GPG (gnu privacy guard) is an open source implementation of PGP. SSH Key generation In order to provide a public key, each user in your system must generate one. You should check to make sure you don\u2019t already have a key. By default, a user\u2019s SSH keys are stored in that user\u2019s ~/.ssh directory. cd $HOME/.ssh ls ```\u2009 You\u2019re looking for a pair of files named something like id_dsa or id_rsa and a matching file with a .pub extension. The .pub file is your public key, and the other file is your private key. If you don't have these, go to the $HOME dir and: ```shell ssh-keygen It will ask you for a location with a name. You choose $(HOME)/.ssh/id_rsa. Click return 2 times. $ ls id_rsa id_rsa.pub So: id_rsa -> private key, id_rsa.pub -> public key. Never ever share the private key. When on Windows, use git bash. On a UNIX sys do this: ssh -T git@github.com Say yes, and then try to download a repo with SSH. If you have problems: Testing your SSH connection Generating Multiple keys for different remote servers to connect to Multiple SSH keys for different servers You have 3 accounts in 3 hosting services. You need a key for each of those. This Method works also for n accounts. This guide is being taylored for Windows-based operating systems. References (1) (2) GPG (GNU privacy guard) First off, we need to generate a key pair. A key pair is composed by a private key and a public key. gpg --full-gen-key It will generate a file, usually, in the $(HOME)/.gnupg directory.","title":"Introduction"},{"location":"SSH_GPG/#introduction","text":"SSH is a protocol that used to connect to servers. GPG (gnu privacy guard) is an open source implementation of PGP.","title":"Introduction"},{"location":"SSH_GPG/#ssh","text":"","title":"SSH"},{"location":"SSH_GPG/#key-generation","text":"In order to provide a public key, each user in your system must generate one. You should check to make sure you don\u2019t already have a key. By default, a user\u2019s SSH keys are stored in that user\u2019s ~/.ssh directory. cd $HOME/.ssh ls ```\u2009 You\u2019re looking for a pair of files named something like id_dsa or id_rsa and a matching file with a .pub extension. The .pub file is your public key, and the other file is your private key. If you don't have these, go to the $HOME dir and: ```shell ssh-keygen It will ask you for a location with a name. You choose $(HOME)/.ssh/id_rsa. Click return 2 times. $ ls id_rsa id_rsa.pub So: id_rsa -> private key, id_rsa.pub -> public key. Never ever share the private key. When on Windows, use git bash. On a UNIX sys do this: ssh -T git@github.com Say yes, and then try to download a repo with SSH. If you have problems: Testing your SSH connection Generating Multiple keys for different remote servers to connect to","title":"Key generation"},{"location":"SSH_GPG/#multiple-ssh-keys-for-different-servers","text":"You have 3 accounts in 3 hosting services. You need a key for each of those. This Method works also for n accounts. This guide is being taylored for Windows-based operating systems.","title":"Multiple SSH keys for different servers"},{"location":"SSH_GPG/#references","text":"(1) (2)","title":"References"},{"location":"SSH_GPG/#gpg-gnu-privacy-guard","text":"First off, we need to generate a key pair. A key pair is composed by a private key and a public key. gpg --full-gen-key It will generate a file, usually, in the $(HOME)/.gnupg directory.","title":"GPG (GNU privacy guard)"},{"location":"Compilation%20Process/Basics/","text":"References Inlcude guard (wikipedia link) Systems Programming in UNIX Linux by K.C. Wang, Springer Let's take two files to start with gcc Script01.c Script02.c gcc Script01.c Script02.c Simple convert into a binary executable gcc Script01.c Script02.c or .. tcc Script01.c Script02.c Statically linked library First step: compile Script02.c into Script02.o, important using the '-c' flag gcc -c Script02.c Second step: create a Statically Linked Library with Script02.o as a member of it ar rcs libmylib.a Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-static' specifies that is being statically linked '-L.' specifies the library path (current directory .) '-l' specifies the library 'mylib' is specified without the prefex lib, as well as the suffix .a gcc -static Script01.c -L. -lmylib Fourth step: run the result, i.e. a.out, as usual ./a.out Dynamic Linking First step: compile Script02.c into Script02.o, -fPIC compile to Position Independent Code Script02.o gcc -c -fPIC Script02.c Second step: create a shared (-shared) Dinamically Linked Library (.so) with Script02.o as a member of it gcc -shared -o libmylib.so Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-L.' specifies the library path (current directory . or you can specify it) '-l' specifies the library as seen next '-lmylib' is specified without the prefex lib, as well as the suffix .a gcc Script01.c -L. -lmylib Third-2 step: exporting the LD_LIBRARY = ./ If the library is not in the curent directory set LD_LIBRARY_PATH to point to the directory containing the library export LD_LIBRARY_PATH = ./ Fourth step: run the result, i.e. a.out, as usual ./a.out","title":"Basics"},{"location":"Compilation%20Process/Basics/#references","text":"Inlcude guard (wikipedia link) Systems Programming in UNIX Linux by K.C. Wang, Springer","title":"References"},{"location":"Compilation%20Process/Basics/#lets-take-two-files-to-start-with","text":"gcc Script01.c Script02.c gcc Script01.c Script02.c","title":"Let's take two files to start with"},{"location":"Compilation%20Process/Basics/#simple-convert-into-a-binary-executable","text":"gcc Script01.c Script02.c or .. tcc Script01.c Script02.c","title":"Simple convert into a binary executable"},{"location":"Compilation%20Process/Basics/#statically-linked-library","text":"First step: compile Script02.c into Script02.o, important using the '-c' flag gcc -c Script02.c Second step: create a Statically Linked Library with Script02.o as a member of it ar rcs libmylib.a Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-static' specifies that is being statically linked '-L.' specifies the library path (current directory .) '-l' specifies the library 'mylib' is specified without the prefex lib, as well as the suffix .a gcc -static Script01.c -L. -lmylib Fourth step: run the result, i.e. a.out, as usual ./a.out","title":"Statically linked library"},{"location":"Compilation%20Process/Basics/#dynamic-linking","text":"First step: compile Script02.c into Script02.o, -fPIC compile to Position Independent Code Script02.o gcc -c -fPIC Script02.c Second step: create a shared (-shared) Dinamically Linked Library (.so) with Script02.o as a member of it gcc -shared -o libmylib.so Script02.o Third step: Static compile-link Script01.c with libmylib.a as a linked library '-L.' specifies the library path (current directory . or you can specify it) '-l' specifies the library as seen next '-lmylib' is specified without the prefex lib, as well as the suffix .a gcc Script01.c -L. -lmylib Third-2 step: exporting the LD_LIBRARY = ./ If the library is not in the curent directory set LD_LIBRARY_PATH to point to the directory containing the library export LD_LIBRARY_PATH = ./ Fourth step: run the result, i.e. a.out, as usual ./a.out","title":"Dynamic Linking"},{"location":"Shell/Chapter_01/","text":"Starting Shell Programming Learning how to use sed, awk, grep, cat, fdisk and more Tools needed Shell: zsh, bash, ash, dash Any TUI text editor (Vim, Emacs, Nano ..) Any terminal emulator","title":"Starting Shell Programming"},{"location":"Shell/Chapter_01/#starting-shell-programming","text":"Learning how to use sed, awk, grep, cat, fdisk and more","title":"Starting Shell Programming"},{"location":"Shell/Chapter_01/#tools-needed","text":"Shell: zsh, bash, ash, dash Any TUI text editor (Vim, Emacs, Nano ..) Any terminal emulator","title":"Tools needed"}]}